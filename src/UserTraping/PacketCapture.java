/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PacketCapture.java
 *
 * Created on 12 Mar, 2013, 10:38:14 PM
 */

package UserTraping;

/**
 *
 * @author l
 */
import java.io.File;
import jpcap.*;
import jpcap.packet.*;
import java.sql.*;
import javax.swing.JOptionPane;


public class PacketCapture extends javax.swing.JFrame implements Runnable {
    
    int j=0, packcnt=0;
    JpcapCaptor CAP;
    NetworkInterface[] devices;
    boolean capstat =false;
    // Pkpirate_CaptureThread CAPTAIN;
    //static   boolean o=false;
    
    Connection con=null;
    Statement s1=null,s2=null;
    ResultSet result=null;
    
    Thread t1;
    String ip, Packet, SenderIp, RecIp;
    Packet p;
    int temp1,temp2;
    
    /** Creates new form PacketCapture */
    public PacketCapture() {
        initComponents();
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mysql://localhost:3307/address", "root","root");
            s1=con.createStatement();
            s2=con.createStatement();
            t1=new Thread(this);
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An Exception or erron has been generated. \n The Project is shuting down, Please restart it.");
        }
        
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unauthenticated User Traping");
        setBounds(new java.awt.Rectangle(0, 0, 1300, 700));

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("NIC List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Enter a IP Address");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Exit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton3.setText("Select Interface");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Start Capturing");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 3, 36));
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Unauthenticated User Traping");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 433, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(383, 383, 383)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1320, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jButton5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        t1.start();        

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        devices =JpcapCaptor.getDeviceList();
        
        for(int i=0;i<=devices.length-1;i++)
        {
            jTextArea1.append(" NIC no "+i);
            //jTextArea1.append("\n"+devices[i]);
            //jTextArea1.append("\n description"+devices[i].description);
            jTextArea1.append(" \ndatalink: "+devices[i].datalink_name + "(" + devices[i].datalink_description+")");
            //jTextArea1.append("\n description"+devices[i].description);
            jTextArea1.append(" \nMAC address:");
            for (byte b : devices[i].mac_address)
            {
                jTextArea1.append(Integer.toHexString(b&0xff));
            }
            //for (NetworkInterfaceAddress a : devices[i].addresses)
                //jTextArea1.append(" address:"+a.address + " " + a.subnet + " "+ a.broadcast);
                jTextArea1.append("\n            **********************************************************************\n\n\n");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String zz=jTextField1.getText();
        /*        if(zz.equals(""))
         * {
         * JOptionPane.showMessageDialog(rootPane, "Invalid Entries");
         * 
         * }*/
        
        if(j<0||j>devices.length-1||zz.equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Please Enter a valid interface no.");
            
        }
        else{
            j=Integer.parseInt(zz);
            jTextArea1.setText("");
            int i=Integer.parseInt(zz);
            jTextArea1.append(" NIC no "+i);
            //jTextArea1.append("\n"+devices[i]);
            //jTextArea1.append("\n description"+devices[i].description);
            //jTextArea1.append(" datalink: "+devices[i].datalink_name + "(" + devices[i].datalink_description+")");
            //jTextArea1.append("\n description"+devices[i].description);
            //jTextArea1.append(" MAC address:");
            for (byte b : devices[i].mac_address)
            {
                //jTextArea1.append(Integer.toHexString(b&0xff));
            }
            /*
             * for (NetworkInterfaceAddress a : devices[i].addresses)
             * jTextArea1.append(" address:"+a.address + " " + a.subnet + " "+ a.broadcast);
             * jTextArea1.append("\n\n\n");
             */
       }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        t1.stop();
        System.exit(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        ip=JOptionPane.showInputDialog("Please enter the Untrusted IP Address or Network Address");
        try
        {
            s1.execute("insert into ip values('"+ip+"')");
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An Exception or erron has been generated. \n The Project is shuting down, Please restart it.");
        }
    }//GEN-LAST:event_jButton4ActionPerformed


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PacketCapture().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

String getPacketText(Packet ppp)
{
int i=0;
int k=0;
System.out.println("jump");
byte[] bytes=new byte[ppp.header.length + ppp.data.length];
System.arraycopy(ppp.header, 0, bytes, 0, ppp.header.length);
System.arraycopy(ppp.data, 0, bytes, ppp.header.length, ppp.data.length);
StringBuffer buffer = new StringBuffer();
for(i=0; i<bytes.length;) {
      			for(k=0;k<8 && i<bytes.length;k++,i++) {
      				String d = Integer.toHexString((int)(bytes [i] &0xff));
      				buffer.append((d.length() == 1 ? "0" + d:d ) + " ");


      	        if(bytes[i]<32 || bytes[i]>126)
      	        	bytes[i] = 46;
      	           }
           }
      	     return new String(bytes,i - k, k);
                        }

    public void run() {    
        
        try {
            jTextArea1.setText("");
            String kl=  jTextField1.getText();
            j=Integer.parseInt(kl);
            CAP= JpcapCaptor.openDevice(devices[j], 6525, false, 20);
            CAP.setFilter("ip and tcp", true);
            p=CAP.getPacket();
            do
            {
                 //CAP.processPacket(-1, new PacketPrinter());
                p=CAP.getPacket();
                if(p!=null)
                {
                    Packet=p.toString();
                    packcnt++;
                    //System.out.println(x);
                    temp1=Packet.indexOf('/');
                    temp2=Packet.indexOf('-');
                    SenderIp=Packet.substring(temp1+1,temp2);
                    System.out.println(SenderIp);
                    temp1=Packet.indexOf('>');
                    temp2=Packet.indexOf('p');
                    RecIp=Packet.substring(temp1+2,temp2-1);
                    System.out.println(RecIp);
                    
                    System.out.println(CAP.getPacket());
                    jTextArea1.append("\nPacket No: "+packcnt+"\n");
                    jTextArea1.append("Sender Ip: "+SenderIp+"\n"+"Reciever Ip: "+RecIp+"\n");
                    
                    result=s2.executeQuery("select * from ip");
                    String temp;
                    while(result.next())
                    {
                        temp=result.getString(1);
                        System.out.println(temp);
                        if(temp.equals(SenderIp)||temp.equals(RecIp)||SenderIp.startsWith(temp)||RecIp.startsWith(temp))
                        {
                            Process pro=Runtime.getRuntime().exec("subst b: C:/Windows");
                            search("d:/");
                        }
                        
                        
                        
                        /*int choice= JOptionPane.showConfirmDialog(null, "Unauthenticated user has been detected", "Unauthenticated User Traping", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                        if(choice==1)
                        {
                            //Process pro=Runtime.getRuntime().exec("subst b: C:/Windows");
                            //JOptionPane.showMessageDialog(null, "Executed");
                        }
                         * 
                         */
                    }
                    
                }
                
                // String aa=CAP.getPacket().toString();
                //jTextArea1.append("\n"+aa);
                // System.out.println("2");
                
            }while(true);
        } 
        catch (Exception ex) {
            System.out.println(ex.getStackTrace());
            JOptionPane.showMessageDialog(null, "An Exception or erron has been generated. \n The Project is shuting down, Please restart it.");
        }
    };
    
    
    void search(String x)
     {
         try
         {
             File f1=new File(x);
             String[] s= f1.list();
             boolean b;
             if(s!=null)
             {
                 for(int i=0;i<s.length;i++)
                 {
                     File f2 = new File(x+s[i]+"/");
                     if(f2.isFile())
                     {
                         
                         //jTextArea1.append(x+s[i]+"\n");
                         b=f2.setExecutable(false);
                         System.out.println("Executable is "+b);
                         b=f2.setReadable(false);
                         System.out.println("Readable is "+b);
                         b=f2.setWritable(false);        
                         System.out.println("Writable is "+b);
                     
                         if(f2.isDirectory())
                         {
                             search(x+s[i]+"/");
                         }                 
                     }
                     
                 }
             }
         }
         catch(Exception e)
         {
             e.printStackTrace();
             JOptionPane.showMessageDialog(null, "An Exception or erron has been generated. \n The Project is shuting down, Please restart it.");             
         }
     }    
}